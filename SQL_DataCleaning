-- Data Cleaning

USE world_layoffs;
-- To-do list:
-- 1. Remove Duplicates
-- 2. Standardized the Data
-- 3. Null Values or Blank Values
-- 4. Remove Any Columns (Belom tentu bisa diterapin di semua)

-- melihat keseluruhan data yang ada
SELECT * 
FROM world_layoffs.layoffs;

-- Pertama, kita akan membuat tabel staging. 
-- Tabel ini akan digunakan untuk membersihkan data. 
-- Selain itu, saya juga ingin memiliki tabel dengan raw data sebagai cadangan jika terjadi sesuatu.
CREATE TABLE layoffs_staging
LIKE layoffs;

INSERT layoffs_staging
SELECT * FROM layoffs;

-- HAL 1: REMOVE DUPLICATES
-- Pertama: check for duplicates
SELECT * FROM world_layoffs.layoffs_staging;
-- query 1.1
SELECT *
FROM world_layoffs.layoffs_staging
;

-- Terlihat semua entri valid dan tidak boleh dihapus maka harus dicek teliti satu per satu agar lebih akurat
-- Maka, ini code yang seharusnya diimplementasikan untuk menghapus duplikat:
-- query 1.2
SELECT *
FROM (
	SELECT company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
			) AS row_num
	FROM 
		world_layoffs.layoffs_staging
) duplicates
WHERE 
	row_num > 1;
-- Maka, dicari yang row numbernya itu > 1 

-- query 1.3
WITH DELETE_CTE AS 
(
SELECT *
FROM (
	SELECT company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
			) AS row_num
	FROM 
		world_layoffs.layoffs_staging
) duplicates
WHERE 
	row_num > 1
)
DELETE
FROM DELETE_CTE
;

-- query 1.4
WITH DELETE_CTE AS (
	SELECT company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, 
    ROW_NUMBER() OVER (PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
	FROM world_layoffs.layoffs_staging
)

-- query 1.5
DELETE FROM world_layoffs.layoffs_staging
WHERE (company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, row_num) IN (
	SELECT company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions, row_num
	FROM DELETE_CTE
) AND row_num > 1;
-- Jadi, pakai solusi tambahin kolom baru yaitu row number. Lalu, dihapus yang >= 2

-- query 1.6
ALTER TABLE world_layoffs.layoffs_staging ADD row_num INT;

-- query 1.7
SELECT *
FROM world_layoffs.layoffs_staging
;

-- query 1.8
CREATE TABLE `world_layoffs`.`layoffs_staging2` (
`company` text,
`location`text,
`industry`text,
`total_laid_off` INT,
`percentage_laid_off` text,
`date` text,
`stage`text,
`country` text,
`funds_raised_millions` int,
row_num INT
);

-- query 1.9
INSERT INTO `world_layoffs`.`layoffs_staging2`
(`company`,
`location`,
`industry`,
`total_laid_off`,
`percentage_laid_off`,
`date`,
`stage`,
`country`,
`funds_raised_millions`,
`row_num`)
SELECT `company`,
`location`,
`industry`,
`total_laid_off`,
`percentage_laid_off`,
`date`,
`stage`,
`country`,
`funds_raised_millions`,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
			) AS row_num
	FROM 
		world_layoffs.layoffs_staging;

-- query 1.10 --> buat menghapus row_num yang duplikat yang diindakiskan yaitu lebih dari atau sama dengan 2
DELETE FROM world_layoffs.layoffs_staging2
WHERE row_num >= 2;


-- HAL 2: STANDARDIZE DATA
SELECT * 
FROM world_layoffs.layoffs_staging2;

-- Buat check null dan empty rows
-- query 2.1
SELECT DISTINCT industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

-- query 2.2
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- check buat mastiin dari beberapa data:
-- query 2.3
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE company LIKE 'Bally%';
-- it seems fine
-- query 2.4
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE company LIKE 'airbnb%';

-- Kayaknya kategori airbnb itu travel, tetapi yang ini tidak terisi. 
-- Saya yakin hal yang sama berlaku untuk yang lainnya. Apa yang bisa kita lakukan adalah 
-- menulis query yang jika ada baris lain dengan nama perusahaan yang sama, akan memperbaruinya dengan nilai industri yang tidak null. 
-- Ini mempermudah jika ada ribuan baris, sehingga kita tidak perlu memeriksanya satu per satu secara manual.

-- Ubah blanks jadi null biar lebih mudah untuk di-edit
-- query 2.5
UPDATE world_layoffs.layoffs_staging2
SET industry = NULL
WHERE industry = '';

-- Buat check null:
-- query 2.6
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- Jika memungkinkan maka perlu diisi nilai-nilai null
-- query 2.7
UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

-- -- Jika kita periksa, 
-- tampaknya Bally's adalah satu-satunya yang tidak memiliki baris yang terisi untuk mengisi nilai-nilai null ini\
-- query 2.8
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE industry IS NULL 
OR industry = ''
ORDER BY industry;

-- ---------------------------------------------------

-- Crypto juga sepertinya punya beberapa variasi maka harus distandarisasi misalkan: 'Crypto'
-- query 2.9
SELECT DISTINCT industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

-- query 2.10
UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry IN ('Crypto Currency', 'CryptoCurrency');

-- Melihat perubahan standarisasi
-- query 2.11
SELECT DISTINCT industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

-- --------------------------------------------------

SELECT *
FROM world_layoffs.layoffs_staging2;

-- United States ada yang pakai titik, jadi perlu diganti misalkan jadi: 'United States'
-- query 2.11
SELECT DISTINCT country
FROM world_layoffs.layoffs_staging2
ORDER BY country;

-- query 2.12
UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country);

-- query 2.13
SELECT DISTINCT country
FROM world_layoffs.layoffs_staging2
ORDER BY country;


-- Benerin date column:
-- query 2.14
SELECT *
FROM world_layoffs.layoffs_staging2;

-- query 2.15
UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

-- query 2.16
ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- query 2.17
SELECT *
FROM world_layoffs.layoffs_staging2;

-- HAL 3: LOOK AT NULL VALUES
-- sepertinya semuanya normal dan tidak ada yang perlu di-populate
-- Selain itu, dengan adanya null bisa mempermudah juga untuk data exploration


-- HAL 4: REMOVE ANY COLUMNS AND ROWS WE NEED TO

-- query 4.1
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL;

-- query 4.2
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Delete useless data yang benar" tidak bisa digunakan
-- query 4.3
DELETE FROM world_layoffs.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- query 4.4
SELECT * 
FROM world_layoffs.layoffs_staging2;

-- query 4.5
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

-- query 4.6
SELECT * 
FROM world_layoffs.layoffs_staging2;
